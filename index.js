// Generated by CoffeeScript 1.6.3
(function() {
  var BASE_URL, Filepicker, Stream, endpoints, fs, http, request;

  Filepicker = function(apiKey) {
    this.apiKey = apiKey;
    return this;
  };

  request = require("request");

  fs = require("fs");

  Stream = require("stream");

  http = require("http");

  BASE_URL = "https://www.filepicker.io";

  endpoints = {};

  endpoints.tempStorage = BASE_URL + "/api/path/storage/";

  Filepicker.prototype.read = function(url, options, callback) {
    var req, req_options;
    req_options = {
      host: "www.filepicker.io",
      port: 80,
      path: url.substring(BASE_URL.length),
      method: "GET"
    };
    req = http.request(req_options, function(res) {
      var body;
      res.setEncoding("utf8");
      body = "";
      res.on("data", function(chunk) {
        return body += chunk.toString("utf8");
      });
      return res.on("end", function() {
        return callback(null, body);
      });
    });
    req.on("error", function(e) {
      return console.log("problem with request: " + e.message);
    });
    req.write("\n");
    return req.end();
  };

  Filepicker.prototype.stream = function(url, options) {
    var req, req_options, stream;
    stream = new Stream();
    stream.writeable = true;
    stream.readable = true;
    stream.write = function(buffer) {
      return stream.emit("data", buffer);
    };
    stream.end = function(buffer) {
      return stream.emit("end", buffer);
    };
    req_options = {
      host: "www.filepicker.io",
      port: 80,
      path: url.substring(BASE_URL.length),
      method: "GET"
    };
    req = http.request(req_options, function(res) {
      return res.pipe(stream);
    });
    req.on("error", function(e) {
      return console.log("problem with request: " + e.message);
    });
    req.write("\n");
    req.end();
    return stream;
  };

  Filepicker.prototype.store = function(fileContents, options, callback, noencode) {
    var returnData;
    if (typeof options === "function") {
      noencode = !!callback;
      callback = options;
      options = {};
    } else {
      noencode = !!noencode;
    }
    if (!options) {
      options = {};
    }
    if (!options.filename) {
      options.filename = "";
    }
    callback = callback || function() {};
    if (!fileContents) {
      callback(new Error("Error: no contents given"));
      return;
    }
    returnData = void 0;
    fileContents = (noencode ? fileContents : new Buffer(fileContents).toString("base64"));
    return request({
      method: "POST",
      headers: {
        Accept: "application/json"
      },
      url: endpoints.tempStorage + options.filename,
      form: {
        fileContents: fileContents,
        apikey: this.apiKey,
        persist: !!options.persist
      }
    }, function(err, res, body) {
      var e, returnJson;
      if (err) {
        callback(err);
        return;
      }
      returnJson = void 0;
      try {
        returnJson = JSON.parse(body);
      } catch (_error) {
        e = _error;
        callback(new Error("Unknown response"), null, body);
        return;
      }
      if (returnJson.result === "ok") {
        returnData = returnJson.data;
        return callback(null, returnData.url, returnData.data);
      } else if (returnJson.result === "error") {
        return callback(new Error(returnJson.msg));
      } else {
        return callback(new Error("Unknown response"), null, returnJson);
      }
    });
  };

  Filepicker.prototype.getUrlFromBuffer = function(buf, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!buf || (!(buf instanceof Buffer))) {
      callback(new Error("Error: must use a Buffer"));
      return;
    }
    return this.getUrlFromData(buf.toString("base64"), options, callback, true);
  };

  Filepicker.prototype.getUrlFromUrl = function(url, options, callback) {
    var self;
    self = this;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!url) {
      callback(new Error("Error: no url given"));
      return;
    }
    return request({
      url: url,
      encoding: null
    }, function(err, res, buf) {
      if (err || !buf) {
        callback(err);
        return;
      }
      return self.getUrlFromBuffer(buf, options, callback, true);
    });
  };

  module.exports = Filepicker;

}).call(this);
